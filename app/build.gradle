buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'realm-android'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "lab262.leituradebolso"
        minSdkVersion 16
        targetSdkVersion 24
        versionName "${getVersionNameTimestamp()}"
        versionCode getVersionCodeTimestamp()
    }

    signingConfigs {
        release {
            storeFile file("../fastlane/androidkeystore.jks")
            storePassword "labstore262032016"
            keyAlias "AndroidKeyStoreLab"
            keyPassword "labstore262032016"
        }
    }

    buildTypes {
        debug{
            buildConfigField "String", "SERVER_URL", '"https://leituradebolso-stagging.herokuapp.com/api/"'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", "SERVER_URL", '"https://leituradebolso-production.herokuapp.com/api/"'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:support-v4:24.1.1'
    compile 'org.adw.library:discrete-seekbar:1.0.1'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.2'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'com.facebook.android:facebook-android-sdk:4.6.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
}

def getVersionNameTimestamp() {
    return new Date().format('yy.MM.ddHHmm')
}

def getVersionCodeTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    def code = formattedDate.toInteger()
    println sprintf("VersionCode: %d", code)
    return code
}
